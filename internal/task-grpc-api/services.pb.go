// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: task-grpc-api/services.proto

package task

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TaskServiceClient is the client API for TaskService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TaskServiceClient interface {
	CreateTask(ctx context.Context, in *CreateTaskRequest, opts ...grpc.CallOption) (*TaskEntity, error)
	GetTask(ctx context.Context, in *GetTaskRequest, opts ...grpc.CallOption) (*TaskEntity, error)
	ListTask(ctx context.Context, in *ListTaskRequest, opts ...grpc.CallOption) (*TaskCollection, error)
	DeleteTask(ctx context.Context, in *DeleteTaskRequest, opts ...grpc.CallOption) (*DeleteTaskResponse, error)
	UpdateTask(ctx context.Context, in *UpdateTaskRequest, opts ...grpc.CallOption) (*TaskEntity, error)
	CompleteTask(ctx context.Context, in *GetTaskRequest, opts ...grpc.CallOption) (*TaskEntity, error)
}

type taskServiceClient struct {
	cc *grpc.ClientConn
}

func NewTaskServiceClient(cc *grpc.ClientConn) TaskServiceClient {
	return &taskServiceClient{cc}
}

func (c *taskServiceClient) CreateTask(ctx context.Context, in *CreateTaskRequest, opts ...grpc.CallOption) (*TaskEntity, error) {
	out := new(TaskEntity)
	err := c.cc.Invoke(ctx, "/task.v1.TaskService/CreateTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) GetTask(ctx context.Context, in *GetTaskRequest, opts ...grpc.CallOption) (*TaskEntity, error) {
	out := new(TaskEntity)
	err := c.cc.Invoke(ctx, "/task.v1.TaskService/GetTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) ListTask(ctx context.Context, in *ListTaskRequest, opts ...grpc.CallOption) (*TaskCollection, error) {
	out := new(TaskCollection)
	err := c.cc.Invoke(ctx, "/task.v1.TaskService/ListTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) DeleteTask(ctx context.Context, in *DeleteTaskRequest, opts ...grpc.CallOption) (*DeleteTaskResponse, error) {
	out := new(DeleteTaskResponse)
	err := c.cc.Invoke(ctx, "/task.v1.TaskService/DeleteTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) UpdateTask(ctx context.Context, in *UpdateTaskRequest, opts ...grpc.CallOption) (*TaskEntity, error) {
	out := new(TaskEntity)
	err := c.cc.Invoke(ctx, "/task.v1.TaskService/UpdateTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) CompleteTask(ctx context.Context, in *GetTaskRequest, opts ...grpc.CallOption) (*TaskEntity, error) {
	out := new(TaskEntity)
	err := c.cc.Invoke(ctx, "/task.v1.TaskService/CompleteTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TaskServiceServer is the server API for TaskService service.
type TaskServiceServer interface {
	CreateTask(context.Context, *CreateTaskRequest) (*TaskEntity, error)
	GetTask(context.Context, *GetTaskRequest) (*TaskEntity, error)
	ListTask(context.Context, *ListTaskRequest) (*TaskCollection, error)
	DeleteTask(context.Context, *DeleteTaskRequest) (*DeleteTaskResponse, error)
	UpdateTask(context.Context, *UpdateTaskRequest) (*TaskEntity, error)
	CompleteTask(context.Context, *GetTaskRequest) (*TaskEntity, error)
}

func RegisterTaskServiceServer(s *grpc.Server, srv TaskServiceServer) {
	s.RegisterService(&_TaskService_serviceDesc, srv)
}

func _TaskService_CreateTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).CreateTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/task.v1.TaskService/CreateTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).CreateTask(ctx, req.(*CreateTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_GetTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).GetTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/task.v1.TaskService/GetTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).GetTask(ctx, req.(*GetTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_ListTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).ListTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/task.v1.TaskService/ListTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).ListTask(ctx, req.(*ListTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_DeleteTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).DeleteTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/task.v1.TaskService/DeleteTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).DeleteTask(ctx, req.(*DeleteTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_UpdateTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).UpdateTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/task.v1.TaskService/UpdateTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).UpdateTask(ctx, req.(*UpdateTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_CompleteTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).CompleteTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/task.v1.TaskService/CompleteTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).CompleteTask(ctx, req.(*GetTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TaskService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "task.v1.TaskService",
	HandlerType: (*TaskServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTask",
			Handler:    _TaskService_CreateTask_Handler,
		},
		{
			MethodName: "GetTask",
			Handler:    _TaskService_GetTask_Handler,
		},
		{
			MethodName: "ListTask",
			Handler:    _TaskService_ListTask_Handler,
		},
		{
			MethodName: "DeleteTask",
			Handler:    _TaskService_DeleteTask_Handler,
		},
		{
			MethodName: "UpdateTask",
			Handler:    _TaskService_UpdateTask_Handler,
		},
		{
			MethodName: "CompleteTask",
			Handler:    _TaskService_CompleteTask_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "task-grpc-api/services.proto",
}

func init() {
	proto.RegisterFile("task-grpc-api/services.proto", fileDescriptor_services_a9f7e358fa90411f)
}

var fileDescriptor_services_a9f7e358fa90411f = []byte{
	// 330 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0xd2, 0xc1, 0x4a, 0xf3, 0x40,
	0x10, 0x07, 0x70, 0xfa, 0x51, 0xda, 0xb2, 0xfd, 0xec, 0x61, 0x5b, 0xac, 0xc6, 0x92, 0x43, 0x8e,
	0x42, 0x13, 0xd4, 0x9b, 0x47, 0xa3, 0x78, 0xa9, 0x17, 0xab, 0x20, 0xb9, 0xad, 0xe9, 0x10, 0x96,
	0x26, 0xd9, 0x35, 0xbb, 0x16, 0x44, 0xbc, 0xf8, 0x06, 0xe2, 0x4b, 0x79, 0x14, 0x7c, 0x01, 0x09,
	0x3e, 0x88, 0xec, 0x66, 0x93, 0xb4, 0x56, 0x0a, 0x5e, 0xff, 0x33, 0xfb, 0xcb, 0xcc, 0x10, 0x34,
	0x92, 0x44, 0xcc, 0xc7, 0x51, 0xc6, 0xc3, 0x31, 0xe1, 0xd4, 0x13, 0x90, 0x2d, 0x68, 0x08, 0xc2,
	0xe5, 0x19, 0x93, 0x0c, 0xb7, 0x55, 0xd5, 0x5d, 0x1c, 0x58, 0xa3, 0x88, 0xb1, 0x28, 0x06, 0x4f,
	0xf5, 0x90, 0x34, 0x65, 0x92, 0x48, 0xca, 0x52, 0xd3, 0x66, 0xfd, 0x40, 0x12, 0x10, 0x82, 0x44,
	0x25, 0x72, 0xf8, 0xd2, 0x44, 0xdd, 0x2b, 0x22, 0xe6, 0xd3, 0xc2, 0xc6, 0x53, 0x84, 0xfc, 0x0c,
	0x88, 0x04, 0x15, 0x62, 0xcb, 0x35, 0xdf, 0x70, 0xeb, 0xf0, 0x12, 0xee, 0xee, 0x41, 0x48, 0xab,
	0x5f, 0xd5, 0x54, 0x7a, 0x96, 0x4a, 0x2a, 0x1f, 0x9c, 0xc1, 0xf3, 0xc7, 0xd7, 0xeb, 0xbf, 0x9e,
	0xd3, 0xf2, 0x54, 0x51, 0x1c, 0x37, 0xa9, 0x84, 0x04, 0x4f, 0x50, 0xfb, 0x1c, 0xa4, 0x16, 0x87,
	0xd5, 0x2b, 0x93, 0x6c, 0xe4, 0xfa, 0x9a, 0xdb, 0xc2, 0xdd, 0x82, 0xf3, 0x1e, 0xe9, 0xec, 0x09,
	0x5f, 0xa0, 0xce, 0x84, 0x8a, 0x82, 0xdb, 0xa9, 0x5e, 0x95, 0x51, 0xe9, 0x0d, 0x57, 0x3c, 0x9f,
	0xc5, 0x31, 0x84, 0xea, 0x2c, 0x4e, 0x4f, 0x9b, 0x1d, 0x6c, 0x46, 0xc4, 0x01, 0x42, 0xa7, 0x10,
	0xc3, 0xda, 0xc6, 0x75, 0x58, 0x92, 0x7b, 0xbf, 0xd6, 0x04, 0x67, 0xa9, 0x80, 0x72, 0xd4, 0xfd,
	0x95, 0x51, 0x6f, 0x10, 0xba, 0xe6, 0xb3, 0xf5, 0x6b, 0xd6, 0xe1, 0xc6, 0xf5, 0x77, 0xb5, 0xd9,
	0xb7, 0x96, 0x4d, 0x73, 0xd2, 0x00, 0xfd, 0xf7, 0x59, 0xc2, 0xab, 0xb9, 0xff, 0x76, 0xd7, 0x91,
	0x86, 0xb7, 0x9d, 0xc1, 0x32, 0x1c, 0x1a, 0xef, 0x04, 0xbf, 0xe5, 0x76, 0xe3, 0x3d, 0xb7, 0x1b,
	0x9f, 0xb9, 0xdd, 0x08, 0x9a, 0xaa, 0xe5, 0xb6, 0xa5, 0x7f, 0x97, 0xa3, 0xef, 0x00, 0x00, 0x00,
	0xff, 0xff, 0xd5, 0xe9, 0x1e, 0x0b, 0x93, 0x02, 0x00, 0x00,
}
